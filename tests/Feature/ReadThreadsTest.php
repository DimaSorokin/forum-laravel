<?php

namespace Tests\Feature;
use App\Channel;
use App\Reply;
use App\Thread;
use App\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class ReadThreadsTest extends TestCase
{
//    use DatabaseMigrations;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = factory(Thread::class)->create();
    }

    /**
     * @Threads
     */
    function test_a_user_can_view_all_threads()
    {
        $this->signIn();
        #step2
        $response = $this->get('/threads')
            ->assertSee($this->thread->title);
//        $response->assertStatus(200);
    }
    function test_a_user_can_read_a_single_threads()
    {
        $this->signIn();
        #step2
        $this->get($this->thread->path())
            ->assertSee($this->thread->title);
    }
    function test_a_user_can_read_replies_that_are_associated_with_a_thread()
    {
        $this->signIn();
        #step3
        $reply = factory(Reply::class)
            ->create(['thread_id' => $this->thread->id]);

        $this->get($this->thread->path())
            ->assertSee($reply->body);

    }
    function test_a_user_can_filter_thread_by_username(){
        $this->signIn(create(User::class, ['name'=>'dima2']));

        $thread = create(Thread::class, ['user_id' => 726]);
        $otherThread = create(Thread::class);

//        Consequatur eos occaecati molestiae
        $this->get('threads?by=dima2')
            ->assertSee($thread->title)
            ->assertDontSee($otherThread->title);
    }

    
//    function test_a_user_can_filter_threads_according_to_a_channel(){
//        $channel = create(Channel::class);
//        $threadInChannel = create(Thread::class, ['channel_id' => $channel->id]);
//
//        $threadNotInChannel = create(Thread::class);
//
//        $this->get('/threads/' . $channel->slug)
//            ->assertSee($threadInChannel->title)
//            ->assertDontSee($threadNotInChannel->title);
//        $this->get('/threads/' . $channel->slug)
//            ->assertDontSee($threadNotInChannel->title);
//    }


}
